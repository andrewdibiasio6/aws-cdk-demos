#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const ec2 = require("@aws-cdk/aws-ec2");
const trino_cluster_stack_1 = require("../lib/trino-cluster-stack");
const app = new cdk.App();
//Hard coded to mock env vars for demo
process.env.CDK_DEFAULT_REGION = 'us-west-1';
process.env.Stage = "BETA";
let nodeGroupOptions;
switch (process.env.Stage) {
    case "BETA":
        nodeGroupOptions = {
            instanceTypes: [ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.LARGE)],
            diskSize: 10,
            minSize: 1,
            maxSize: 2,
        };
    case "PROD":
        nodeGroupOptions = {
            instanceTypes: [ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.LARGE)],
            diskSize: 10,
            minSize: 10,
            maxSize: 20,
        };
    default:
        nodeGroupOptions = {
            instanceTypes: [ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.LARGE)],
            diskSize: 10,
            minSize: 1,
            maxSize: 1,
        };
}
new trino_cluster_stack_1.TrinoClusterStack(app, 'TrinoClusterStack', {
    cdkProps: {
        env: {
            account: process.env.CDK_DEFAULT_ACCOUNT,
            region: process.env.CDK_DEFAULT_REGION,
        },
    },
    clusterName: 'trino-cluster',
    port: 8080,
    replicas: 1,
    nodegroupOptions: nodeGroupOptions,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNkay1hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EscUNBQXFDO0FBQ3JDLHdDQUF3QztBQUV4QyxvRUFBK0Q7QUFHL0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsc0NBQXNDO0FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEdBQUcsV0FBVyxDQUFDO0FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtBQUUxQixJQUFJLGdCQUFrQyxDQUFDO0FBRXZDLFFBQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUU7SUFDdEIsS0FBSyxNQUFNO1FBQ1AsZ0JBQWdCLEdBQUc7WUFDWCxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xGLFFBQVEsRUFBRSxFQUFFO1lBQ1osT0FBTyxFQUFFLENBQUM7WUFDVixPQUFPLEVBQUUsQ0FBQztTQUNqQixDQUFBO0lBRUwsS0FBSyxNQUFNO1FBQ1AsZ0JBQWdCLEdBQUc7WUFDWCxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xGLFFBQVEsRUFBRSxFQUFFO1lBQ1osT0FBTyxFQUFFLEVBQUU7WUFDWCxPQUFPLEVBQUUsRUFBRTtTQUNsQixDQUFBO0lBQ0w7UUFDSSxnQkFBZ0IsR0FBRztZQUNmLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEYsUUFBUSxFQUFFLEVBQUU7WUFDWixPQUFPLEVBQUUsQ0FBQztZQUNWLE9BQU8sRUFBRSxDQUFDO1NBQ2pCLENBQUE7Q0FDSjtBQUVELElBQUksdUNBQWlCLENBQUMsR0FBRyxFQUFFLG1CQUFtQixFQUFFO0lBQzVDLFFBQVEsRUFBRTtRQUNOLEdBQUcsRUFBRTtZQUNMLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtZQUN4QyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7U0FDckM7S0FDSjtJQUNELFdBQVcsRUFBRSxlQUFlO0lBQzVCLElBQUksRUFBRSxJQUFJO0lBQ1YsUUFBUSxFQUFFLENBQUM7SUFDWCxnQkFBZ0IsRUFBRSxnQkFBZ0I7Q0FDckMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJ0Bhd3MtY2RrL2F3cy1lYzInO1xuXG5pbXBvcnQgeyBUcmlub0NsdXN0ZXJTdGFjayB9IGZyb20gJy4uL2xpYi90cmluby1jbHVzdGVyLXN0YWNrJztcbmltcG9ydCB7IE5vZGVncm91cE9wdGlvbnMgfSBmcm9tICdAYXdzLWNkay9hd3MtZWtzJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuLy9IYXJkIGNvZGVkIHRvIG1vY2sgZW52IHZhcnMgZm9yIGRlbW9cbnByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiA9ICd1cy13ZXN0LTEnO1xucHJvY2Vzcy5lbnYuU3RhZ2UgPSBcIkJFVEFcIlxuXG5sZXQgbm9kZUdyb3VwT3B0aW9uczogTm9kZWdyb3VwT3B0aW9ucztcblxuc3dpdGNoKHByb2Nlc3MuZW52LlN0YWdlKSB7XG4gICAgY2FzZSBcIkJFVEFcIjpcbiAgICAgICAgbm9kZUdyb3VwT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVR5cGVzOiBbZWMyLkluc3RhbmNlVHlwZS5vZihlYzIuSW5zdGFuY2VDbGFzcy5NNSwgZWMyLkluc3RhbmNlU2l6ZS5MQVJHRSldLFxuICAgICAgICAgICAgICAgIGRpc2tTaXplOiAxMCxcbiAgICAgICAgICAgICAgICBtaW5TaXplOiAxLFxuICAgICAgICAgICAgICAgIG1heFNpemU6IDIsXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgY2FzZSBcIlBST0RcIjpcbiAgICAgICAgbm9kZUdyb3VwT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVR5cGVzOiBbZWMyLkluc3RhbmNlVHlwZS5vZihlYzIuSW5zdGFuY2VDbGFzcy5NNSwgZWMyLkluc3RhbmNlU2l6ZS5MQVJHRSldLFxuICAgICAgICAgICAgICAgIGRpc2tTaXplOiAxMCxcbiAgICAgICAgICAgICAgICBtaW5TaXplOiAxMCxcbiAgICAgICAgICAgICAgICBtYXhTaXplOiAyMCxcbiAgICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICAgIG5vZGVHcm91cE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBpbnN0YW5jZVR5cGVzOiBbZWMyLkluc3RhbmNlVHlwZS5vZihlYzIuSW5zdGFuY2VDbGFzcy5NNSwgZWMyLkluc3RhbmNlU2l6ZS5MQVJHRSldLFxuICAgICAgICAgICAgZGlza1NpemU6IDEwLFxuICAgICAgICAgICAgbWluU2l6ZTogMSxcbiAgICAgICAgICAgIG1heFNpemU6IDEsXG4gICAgfVxufVxuXG5uZXcgVHJpbm9DbHVzdGVyU3RhY2soYXBwLCAnVHJpbm9DbHVzdGVyU3RhY2snLCB7XG4gICAgY2RrUHJvcHM6IHtcbiAgICAgICAgZW52OiB7XG4gICAgICAgIGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsXG4gICAgICAgIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgY2x1c3Rlck5hbWU6ICd0cmluby1jbHVzdGVyJyxcbiAgICBwb3J0OiA4MDgwLFxuICAgIHJlcGxpY2FzOiAxLFxuICAgIG5vZGVncm91cE9wdGlvbnM6IG5vZGVHcm91cE9wdGlvbnMsXG59KTtcbiJdfQ==